{% import "templates/macros.txt" %}
package {{entity.daoPackage}};

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import {{entity.mapperPackage}}.{{entity.mapperClass}};
import {{entity.javaPackage}}.{{entity.javaClass}};
import org.xlbean.xlapi.dao.DaoUtil;

@Component
public class {{entity.daoClass}} {

    @Autowired
    private {{entity.mapperClass}} mapper;
    
    public {{entity.javaClass}} selectOne({{keyFields(entity, true, false, false)}}) {
        return mapper.selectOne({{keyFields(entity, false, false, false)}});
    }
    
    public List<{{entity.javaClass}}> selectList({{parentKeyFields(entity, true, false, false)}}{{entity.parentKeys.size > 0 ? ', ' : ''}}int offset, int limit) {
        return mapper.selectList({{parentKeyFields(entity, false, false, false)}}{{entity.parentKeys.size > 0 ? ', ' : ''}}offset, limit);
    }
    
    public {{entity.javaClass}} insert({{entity.javaClass}} object) {
        return insert(object, false);
    }
    
    public {{entity.javaClass}} insert({{entity.javaClass}} object, boolean autoGenerateId) {
        if (autoGenerateId) {
            object.updateKey({{generators(entity)}});
        }
        DaoUtil.updateSystemValueForInsert(object);
        mapper.insert(object);
        return object;
    }

    public void update({{entity.javaClass}} object) {
        DaoUtil.updateSystemValueForUpdate(object);
        mapper.update(object);
    }

    public void updatePartial({{entity.javaClass}} object) {
        DaoUtil.updateSystemValueForUpdate(object);
        mapper.updateSelective(object);
    }
    
    public {{entity.javaClass}} upsert({{entity.javaClass}} object) {
        {{entity.javaClass}} registeredObject = mapper.selectOne({{keyFields(entity, false, false, true)}});
        if (registeredObject == null) {
            insert(object, false);
            return object;
        } else {
            DaoUtil.updateSystemValueForUpdate(object);
            mapper.updateSelective(object);
            return object;
        }
    }
    
    public void delete({{keyFields(entity, true, false, false)}}) {
        mapper.delete({{keyFields(entity, false, false, false)}});
    }

{% for key in entity.keys %}
{% if not key.isParentKey %}
    public {{key.type}} {{generatorName(key)}}({{keyFieldsForGenerateKey(entity, key, true)}}) {
        return mapper.{{generatorName(key)}}({{keyFieldsForGenerateKey(entity, key, false)}});
    }

{% endif %}
{% endfor %}

}
{##}
{% macro generatorName(property) %}
generate{{property.propertyName | capitalize}}
{% endmacro %}
{##}
{% macro generators(entity) %}
{% for key in entity.keys %}
{% if not key.isParentKey %}
{{generatorName(key)}}({{keyFieldsForGenerateKey(entity, key, false, true)}}){% else %}
null{% endif %}
{{loop.index == loop.length - 1 ? '' : ', '}}
{% endfor %}
{% endmacro %}
